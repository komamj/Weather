apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs.kotlin"

apply plugin: 'jacoco'

android {
    compileSdkVersion compileAndroidSdkVersion as int
    buildToolsVersion androidBuildToolsVerison as String
    defaultConfig {
        applicationId applicationId as String
        minSdkVersion minAndroidSdkVersion as int
        targetSdkVersion targetAndroidSdkVersion as int
        versionCode appVersionCode as int
        versionName appVersionName as String

        buildConfigField "String", "API_KEY", API_KEY

        manifestPlaceholders = ["AMAP_KEY": "${AMAP_KEY}"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.kotlin.stdlib
    /*implementation deps.kotlin.coroutines_android
    implementation deps.kotlin.coroutines_core*/

    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    kapt deps.lifecycle.compiler

    implementation deps.support.app_compat
    implementation deps.support.design
    implementation deps.view_pager
    implementation deps.constraint_layout

    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx

    implementation deps.glide.runtime
    kapt deps.glide.compiler

    implementation deps.room.runtime
    kapt deps.room.compiler

    implementation deps.rx.java
    implementation deps.rx.android

    implementation deps.network.retrofit
    implementation deps.network.gson
    implementation deps.network.rxjava2
    implementation deps.network.logging_interceptor

    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    kapt deps.dagger.compiler
    kapt deps.dagger.android_support_compiler

    implementation deps.timber

    implementation deps.map

    implementation project(':commonlibrary')

    debugImplementation deps.leakcanary

    testImplementation deps.test.junit
    testImplementation deps.test.mockito
    testImplementation deps.test.arch_core

    androidTestImplementation deps.test.runner
    androidTestImplementation deps.test.espresso_core
    androidTestImplementation deps.test.arch_core
    androidTestImplementation deps.test.mockito
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}
